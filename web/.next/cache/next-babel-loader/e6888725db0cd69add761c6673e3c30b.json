{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\StevenDev\\\\Documents\\\\git\\\\Mhomepage\\\\web\\\\pages\\\\posts\\\\[pid].jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport client from '../../client';\nimport Layout from '../../Components/Layout';\nimport Nav from '../../Components/Nav';\nimport BlockContent from '@sanity/block-content-to-react';\nimport groq from 'groq';\nimport imageUrlBuilder from '@sanity/image-url';\nimport styles from './[pid].module.scss';\n\nfunction urlFor(source) {\n  return imageUrlBuilder(client).image(source);\n}\n\nconst Post = ({\n  data\n}) => {\n  console.log(_objectSpread({}, client));\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 1\n    }\n  }, __jsx(Nav, {\n    current: \"blog\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 1\n    }\n  }), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 1\n    }\n  }, \"Title: \", data.title), __jsx(BlockContent, _extends({\n    blocks: data.body,\n    imageOptions: {\n      w: 480,\n      h: 240,\n      fit: 'max'\n    }\n  }, client.config(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 1\n    }\n  })));\n};\n\nconst query = groq`*[_type == \"post\" && slug.current == $pid][0]{\n  title,\n  \"name\": author ->name,\n  \"categories\": categories[] -> title,\n  \"authorImage\": author->image,\n  body,\n  mainImage\n} `;\nexport async function getServerSideProps(context) {\n  const {\n    pid = \"\"\n  } = context.query;\n  const data = await client.fetch(query, {\n    pid\n  });\n  return {\n    props: {\n      data\n    }\n  };\n}\nexport default Post;","map":{"version":3,"sources":["C:/Users/StevenDev/Documents/git/Mhomepage/web/pages/posts/[pid].jsx"],"names":["client","Layout","Nav","BlockContent","groq","imageUrlBuilder","styles","urlFor","source","image","Post","data","console","log","title","body","w","h","fit","config","query","getServerSideProps","context","pid","fetch","props"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,MAAP,MAAmB,cAAnB;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,GAAP,MAAgB,sBAAhB;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,MAAP,MAAmB,qBAAnB;;AAEA,SAASC,MAAT,CAAiBC,MAAjB,EAAyB;AACvB,SAAOH,eAAe,CAACL,MAAD,CAAf,CAAwBS,KAAxB,CAA8BD,MAA9B,CAAP;AACD;;AAGD,MAAME,IAAI,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAY;AACvBC,EAAAA,OAAO,CAACC,GAAR,mBAAgBb,MAAhB;AACF,SACA,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,MAAC,GAAD;AAAK,IAAA,OAAO,EAAC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,EAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAWW,IAAI,CAACG,KAAhB,CAFA,EAGA,MAAC,YAAD;AACE,IAAA,MAAM,EAAIH,IAAI,CAACI,IADjB;AAEE,IAAA,YAAY,EAAE;AAACC,MAAAA,CAAC,EAAE,GAAJ;AAASC,MAAAA,CAAC,EAAC,GAAX;AAAgBC,MAAAA,GAAG,EAAE;AAArB;AAFhB,KAGMlB,MAAM,CAACmB,MAAP,EAHN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAHA,CADA;AAWC,CAbD;;AAeA,MAAMC,KAAK,GAAGhB,IAAK;;;;;;;GAAnB;AASA,OAAO,eAAeiB,kBAAf,CAAkCC,OAAlC,EAA2C;AAChD,QAAK;AAAEC,IAAAA,GAAG,GAAG;AAAR,MAAeD,OAAO,CAACF,KAA5B;AACA,QAAMT,IAAI,GAAI,MAAMX,MAAM,CAACwB,KAAP,CAClBJ,KADkB,EACX;AAACG,IAAAA;AAAD,GADW,CAApB;AAGA,SAAO;AAACE,IAAAA,KAAK,EAAE;AAACd,MAAAA;AAAD;AAAR,GAAP;AACD;AAID,eAAeD,IAAf","sourcesContent":["import client from '../../client';\r\nimport Layout from '../../Components/Layout';\r\nimport Nav from '../../Components/Nav';\r\nimport BlockContent from '@sanity/block-content-to-react';\r\nimport groq from 'groq';\r\nimport imageUrlBuilder from '@sanity/image-url';\r\nimport styles from './[pid].module.scss';\r\n\r\nfunction urlFor (source) {\r\n  return imageUrlBuilder(client).image(source);\r\n}\r\n\r\n\r\nconst Post = ({data}) => {\r\n  console.log({...client})\r\nreturn (\r\n<Layout>\r\n<Nav current='blog' />\r\n<p>Title: {data.title}</p>\r\n<BlockContent\r\n  blocks = {data.body}\r\n  imageOptions={{w: 480, h:240, fit: 'max'}}\r\n  {...client.config()}\r\n  />\r\n</Layout>\r\n)\r\n}\r\n\r\nconst query = groq`*[_type == \"post\" && slug.current == $pid][0]{\r\n  title,\r\n  \"name\": author ->name,\r\n  \"categories\": categories[] -> title,\r\n  \"authorImage\": author->image,\r\n  body,\r\n  mainImage\r\n} `;\r\n\r\nexport async function getServerSideProps(context) {\r\n  const{ pid = \"\" } = context.query;\r\n  const data =  await client.fetch(\r\n    query, {pid})  \r\n\r\n  return {props: {data}}\r\n}\r\n\r\n\r\n\r\nexport default Post"]},"metadata":{},"sourceType":"module"}