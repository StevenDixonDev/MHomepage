{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Layout from '../Components/Layout';\nimport Nav from '../Components/Nav';\nimport PostPreviewWrapper from '../Components/PostPreviewsWrapper';\nimport client from '../client';\nimport groq from 'groq';\nimport urlImageBuilder from '@sanity/image-url';\n\nconst urlFor = source => {\n  return urlImageBuilder(client).image(source);\n};\n\nconst Post = ({\n  data\n}) => {\n  const posts = data.map(item => _objectSpread(_objectSpread({}, item), {}, {\n    previewImage: urlFor(item.mainImage).width(400).url()\n  }));\n  return __jsx(Layout, null, __jsx(Nav, {\n    current: \"blog\"\n  }), __jsx(PostPreviewWrapper, {\n    posts: posts\n  }));\n};\n\nconst query = groq`*[_type == \"post\"]{\n  mainImage,\n  title,\n  publishedAt,\n  \"author\": author -> name,\n  \"categories\": categories[] -> title,\n  slug,\n  excerpt\n}`;\nexport async function getServerSideProps(context) {\n  const data = await client.fetch(query);\n  return {\n    props: {\n      data\n    }\n  };\n}\nexport default Post;","map":null,"metadata":{},"sourceType":"module"}