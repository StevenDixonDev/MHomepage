{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\StevenDev\\\\Documents\\\\git\\\\Mhomepage\\\\web\\\\pages\\\\posts\\\\[pid].jsx\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport client from '../../client';\nimport Layout from '../../Components/Layout';\nimport Nav from '../../Components/Nav';\nimport PostWrapper from '../../Components/PostWrapper';\nimport imageUrlBuilder from '@sanity/image-url';\nimport BlockContent from '@sanity/block-content-to-react';\n\nfunction urlFor(source) {\n  return imageUrlBuilder(client).image(source);\n}\n\nvar Post = function Post(_ref) {\n  var data = _ref.data;\n  console.log(data);\n  var postData = {\n    categories: data.categories,\n    mainImage: urlFor(item.mainImage).width(1200).url()\n  };\n  return __jsx(Layout, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 1\n    }\n  }, __jsx(Nav, {\n    current: \"blog\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 1\n    }\n  }), __jsx(PostWrapper, {\n    client: client,\n    post: postData,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 1\n    }\n  }, __jsx(BlockContent, _extends({\n    blocks: data.body,\n    imageOptions: {\n      w: 480,\n      h: 240,\n      fit: 'max'\n    }\n  }, client.config(), {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 3\n    }\n  }))));\n};\n\n_c = Post;\nexport var __N_SSP = true;\nexport default Post;\n\nvar _c;\n\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"sources":["C:/Users/StevenDev/Documents/git/Mhomepage/web/pages/posts/[pid].jsx"],"names":["client","Layout","Nav","PostWrapper","imageUrlBuilder","BlockContent","urlFor","source","image","Post","data","console","log","postData","categories","mainImage","item","width","url","body","w","h","fit","config"],"mappings":";;;;;;;AAAA,OAAOA,MAAP,MAAmB,cAAnB;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,GAAP,MAAgB,sBAAhB;AACA,OAAOC,WAAP,MAAwB,8BAAxB;AAEA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,YAAP,MAAyB,gCAAzB;;AAGA,SAASC,MAAT,CAAiBC,MAAjB,EAAyB;AACvB,SAAOH,eAAe,CAACJ,MAAD,CAAf,CAAwBQ,KAAxB,CAA8BD,MAA9B,CAAP;AACD;;AAGD,IAAME,IAAI,GAAG,SAAPA,IAAO,OAAY;AAAA,MAAVC,IAAU,QAAVA,IAAU;AACzBC,EAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACA,MAAMG,QAAQ,GAAG;AACfC,IAAAA,UAAU,EAAEJ,IAAI,CAACI,UADF;AAEfC,IAAAA,SAAS,EAAET,MAAM,CAACU,IAAI,CAACD,SAAN,CAAN,CAAuBE,KAAvB,CAA6B,IAA7B,EAAmCC,GAAnC;AAFI,GAAjB;AAQA,SACA,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,MAAC,GAAD;AAAK,IAAA,OAAO,EAAC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,EAEA,MAAC,WAAD;AAAa,IAAA,MAAM,EAAIlB,MAAvB;AAA+B,IAAA,IAAI,EAAIa,QAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,YAAD;AACE,IAAA,MAAM,EAAIH,IAAI,CAACS,IADjB;AAEE,IAAA,YAAY,EAAE;AAACC,MAAAA,CAAC,EAAE,GAAJ;AAASC,MAAAA,CAAC,EAAC,GAAX;AAAgBC,MAAAA,GAAG,EAAE;AAArB;AAFhB,KAGMtB,MAAM,CAACuB,MAAP,EAHN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,CAFA,CADA;AAYC,CAtBD;;KAAMd,I;;AA2CN,eAAeA,IAAf","sourcesContent":["import client from '../../client';\r\nimport Layout from '../../Components/Layout';\r\nimport Nav from '../../Components/Nav';\r\nimport PostWrapper from '../../Components/PostWrapper';\r\nimport groq from 'groq';\r\nimport imageUrlBuilder from '@sanity/image-url';\r\nimport BlockContent from '@sanity/block-content-to-react';\r\n\r\n\r\nfunction urlFor (source) {\r\n  return imageUrlBuilder(client).image(source);\r\n}\r\n\r\n\r\nconst Post = ({data}) => {\r\nconsole.log(data)\r\nconst postData = {\r\n  categories: data.categories,\r\n  mainImage: urlFor(item.mainImage).width(1200).url()\r\n\r\n}\r\n\r\n\r\n \r\nreturn (\r\n<Layout>\r\n<Nav current='blog' />\r\n<PostWrapper client = {client} post = {postData}>\r\n  <BlockContent\r\n    blocks = {data.body}\r\n    imageOptions={{w: 480, h:240, fit: 'max'}}\r\n    {...client.config()}\r\n    />\r\n</PostWrapper>\r\n</Layout>\r\n)\r\n}\r\n\r\nconst query = groq`*[_type == \"post\" && slug.current == $pid][0]{\r\n  title,\r\n  \"name\": author ->name,\r\n  \"categories\": categories[] -> title,\r\n  \"authorImage\": author->image,\r\n  body,\r\n  mainImage\r\n} `;\r\n\r\nexport async function getServerSideProps(context) {\r\n  const{ pid = \"\" } = context.query;\r\n  const data =  await client.fetch(\r\n    query, {pid})  \r\n\r\n  return {props: {data}}\r\n}\r\n\r\n\r\n\r\nexport default Post"]},"metadata":{},"sourceType":"module"}