{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\StevenDev\\\\Documents\\\\git\\\\Mhomepage\\\\web\\\\pages\\\\posts.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Layout from '../Components/Layout';\nimport Nav from '../Components/Nav';\nimport PostPreviewWrapper from '../Components/PostPreviewsWrapper';\nimport client from '../client';\nimport groq from 'groq';\nimport urlImageBuilder from '@sanity/image-url';\n\nconst urlFor = source => {\n  return urlImageBuilder(client).image(source);\n};\n\nconst Post = ({\n  data\n}) => {\n  const posts = data.map(item => _objectSpread(_objectSpread({}, item), {}, {\n    previewImage: urlFor(item.mainImage).width(2500).url()\n  }));\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 3\n    }\n  }, __jsx(Nav, {\n    current: \"blog\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 3\n    }\n  }), __jsx(PostPreviewWrapper, {\n    posts: posts,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 3\n    }\n  }));\n};\n\nconst query = groq`*[_type == \"post\"]{\n  mainImage,\n  title,\n  \"author\": author -> name,\n  \"categories\": categories[] -> title,\n  slug,\n  publishedAt\n}`;\nexport async function getServerSideProps(context) {\n  const data = await client.fetch(query);\n  return {\n    props: {\n      data\n    }\n  };\n}\nexport default Post;","map":{"version":3,"sources":["C:/Users/StevenDev/Documents/git/Mhomepage/web/pages/posts.jsx"],"names":["Layout","Nav","PostPreviewWrapper","client","groq","urlImageBuilder","urlFor","source","image","Post","data","posts","map","item","previewImage","mainImage","width","url","query","getServerSideProps","context","fetch","props"],"mappings":";;;;;;;;;;AAAA,OAAOA,MAAP,MAAmB,sBAAnB;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,OAAOC,kBAAP,MAA+B,mCAA/B;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;;AAEA,MAAMC,MAAM,GAAIC,MAAD,IAAY;AACzB,SAAOF,eAAe,CAACF,MAAD,CAAf,CAAwBK,KAAxB,CAA8BD,MAA9B,CAAP;AACD,CAFD;;AAIA,MAAME,IAAI,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAY;AAEzB,QAAMC,KAAK,GAAGD,IAAI,CAACE,GAAL,CAAUC,IAAI,oCAASA,IAAT;AAAeC,IAAAA,YAAY,EAAER,MAAM,CAACO,IAAI,CAACE,SAAN,CAAN,CAAuBC,KAAvB,CAA6B,IAA7B,EAAmCC,GAAnC;AAA7B,IAAd,CAAd;AAEA,SACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,MAAC,GAAD;AAAK,IAAA,OAAO,EAAC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,EAEA,MAAC,kBAAD;AAAoB,IAAA,KAAK,EAAEN,KAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFA,CADF;AAMC,CAVD;;AAYA,MAAMO,KAAK,GAAGd,IAAK;;;;;;;EAAnB;AASA,OAAO,eAAee,kBAAf,CAAkCC,OAAlC,EAA2C;AAChD,QAAMV,IAAI,GAAI,MAAMP,MAAM,CAACkB,KAAP,CAAaH,KAAb,CAApB;AACA,SAAO;AAACI,IAAAA,KAAK,EAAE;AAACZ,MAAAA;AAAD;AAAR,GAAP;AACD;AAED,eAAeD,IAAf","sourcesContent":["import Layout from '../Components/Layout';\r\nimport Nav from '../Components/Nav';\r\nimport PostPreviewWrapper from '../Components/PostPreviewsWrapper';\r\nimport client from '../client';\r\nimport groq from 'groq';\r\nimport urlImageBuilder from '@sanity/image-url';\r\n\r\nconst urlFor = (source) => {\r\n  return urlImageBuilder(client).image(source)\r\n}\r\n\r\nconst Post = ({data}) => {\r\n\r\nconst posts = data.map((item =>( {...item, previewImage: urlFor(item.mainImage).width(2500).url()})))\r\n\r\nreturn (\r\n  <Layout>\r\n  <Nav current='blog' />\r\n  <PostPreviewWrapper posts={posts}/>\r\n  </Layout>\r\n)\r\n}\r\n\r\nconst query = groq`*[_type == \"post\"]{\r\n  mainImage,\r\n  title,\r\n  \"author\": author -> name,\r\n  \"categories\": categories[] -> title,\r\n  slug,\r\n  publishedAt\r\n}`;\r\n\r\nexport async function getServerSideProps(context) {\r\n  const data =  await client.fetch(query)  \r\n  return {props: {data}}\r\n}\r\n\r\nexport default Post;"]},"metadata":{},"sourceType":"module"}