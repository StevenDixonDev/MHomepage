{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport client from '../../client';\nimport Layout from '../../Components/Layout';\nimport Nav from '../../Components/Nav';\nimport PostWrapper from '../../Components/PostWrapper';\nimport groq from 'groq';\nimport imageUrlBuilder from '@sanity/image-url';\nimport BlockContent from '@sanity/block-content-to-react';\n\nfunction urlFor(source) {\n  return imageUrlBuilder(client).image(source);\n}\n\nconst Post = ({\n  data\n}) => {\n  console.log(data);\n\n  const postData = _objectSpread(_objectSpread({}, data), {}, {\n    categories: data.categories,\n    mainImage: urlFor(data.mainImage).width(1200).url(),\n    authorImage: urlFor(data.authorImage).width(100).url()\n  });\n\n  return __jsx(Layout, null, __jsx(Nav, {\n    current: \"blog\"\n  }), __jsx(PostWrapper, {\n    client: client,\n    post: postData\n  }, __jsx(BlockContent, _extends({\n    blocks: data.body,\n    imageOptions: {\n      w: 480,\n      h: 240,\n      fit: 'max'\n    }\n  }, client.config()))));\n};\n\nconst query = groq`*[_type == \"post\" && slug.current == $pid][0]{\n  title,\n  \"name\": author ->name,\n  \"categories\": categories[] -> title,\n  \"authorImage\": author -> image,\n  body,\n  mainImage,\n  publishedAt\n} `;\nexport async function getServerSideProps(context) {\n  const {\n    pid = \"\"\n  } = context.query;\n  const data = await client.fetch(query, {\n    pid\n  });\n  return {\n    props: {\n      data\n    }\n  };\n}\nexport default Post;","map":null,"metadata":{},"sourceType":"module"}